# -*- coding: utf-8 -*-
"""
Created on Wed Jul 26 14:27:59 2023
@author: ecslab

This script including multiple steps to pruning the evolution tree generated by 'evolution_tree'
The pruning process is necessary due to large part of the evolution tree is passing directly, and no onformantion in such edge.

"""
import pydot
import networkx as nx
import datetime
import numpy as np
import sys
import graphviz
import copy

# the colors below should consistant with the settings in 'evolution_tree', since it's depended to recognize the edge type
same_color = 'black'  # edge represents the 
muta_color = 'green'  # edge color for mutation only
mut_cro_color = 'blue'  # edge color for corss-over and mutation
# cross over it's no need to change

#%%
def make_dot(G, edge_color):
    ''' create dot file (graphviz) from Graph object (networkx)
    '''
    dot = graphviz.Digraph('test') 
    for ii, color in zip(G.edges, edge_color):
        dot.edge(ii[0], ii[1], color=color)  # e.g. ('172_19', '173_1')
    return dot

def find_in_edge(edges_name, node_name):
    ''' find edges pointing to the specified node
    edges_name:[(node1,node2),(node3,node4)...]
    '''
    in_edge_idx = [i for i in range(len(edges_name)) if edges_name[i][1] == node_name]
    return in_edge_idx

def find_out_edge(edges_name, node_name):
    ''' find edges originated from the specified node
    '''
    out_edge_idx = [i for i in range(len(edges_name)) if edges_name[i][0] == node_name]
    return out_edge_idx  

#%% read dot file, and get edge and node names
graph = pydot.graph_from_dot_file(r"D:\000_临时文件\GA_Codes\Trees\13\evolution-tree.gv")  # replace the directory

edges = graph[0].get_edge_list()
# nodes = graph[0].get_nodes()
# nodes_name = [i.get_name()[1:-1] for i in nodes]
edges_name = [(i.get_source()[1:-1], i.get_destination()[1:-1]) for i in edges] 
edges_color = [i.get_color() for i in edges]
edges_color_map = dict(zip(edges_name, edges_color))  # save of each edge

#%% create directed graph
G = nx.DiGraph()
G.add_edges_from(edges_name)

#%% visualize and confirm the result
edges_color1 = [edges_color_map[i] for i in list(G.edges)]
dot = make_dot(G, edges_color1)


# begin pruning 
#%% Step 1：delete the nodes with all the inward edges and outward edges are no change
# travelse all nodes
edges_color_map1 = copy.deepcopy(edges_color_map)
edges_name1 = copy.deepcopy(list(G.edges))
for node in list(G.nodes):
    out_edge_idx = find_out_edge(edges_name1, node)
    in_edge_idx = find_in_edge(edges_name1, node)
    
    if len(out_edge_idx) == 1 and len(in_edge_idx) == 1:
        if edges_color_map1[edges_name1[out_edge_idx[0]]] == same_color and  edges_color_map1[edges_name1[in_edge_idx[0]]] == same_color:  # 前后边皆黑色
            out_node_name = edges_name1[out_edge_idx[0]][1]
            in_node_name = edges_name1[in_edge_idx[0]][0]
            new_edge = (in_node_name, out_node_name)  # A->B, B->C, then A->C
            
            del_index = [out_edge_idx[0], in_edge_idx[0]]
            del_index.sort(reverse=True)
            for index in del_index:
                del edges_name1[index]
                # edges_color_map1.pop(edges_name1[out_edge_idx[0]], None)
                # edges_color_map1.pop(edges_name1[in_edge_idx[0]], None)
            
            edges_name1.append(new_edge)
            edges_color_map1[new_edge] = same_color  # add new key
        else:
            continue
    else:
        continue

G2 = nx.DiGraph()
G2.add_edges_from(edges_name1)
dot2 = make_dot(G2, [edges_color_map1[i] for i in list(G2.edges)])


#%% Step 2：delte nodes with single no change inward edge and multiple output edge(no restriction for the outward edge)
edges_color_map2 = copy.deepcopy(edges_color_map1)  # 
edges_name2 = copy.deepcopy(list(G2.edges))
for node in list(G2.nodes):
    out_edge_idx = find_out_edge(edges_name2, node)
    in_edge_idx = find_in_edge(edges_name2, node)
    
    if len(out_edge_idx) > 1 and len(in_edge_idx) == 1:
        if edges_color_map2[edges_name2[in_edge_idx[0]]] == same_color:
            in_node_name = edges_name2[in_edge_idx[0]][0]
            out_node_names = [edges_name2[out_idx][1] for out_idx in out_edge_idx]
            
            for i in range(len(out_edge_idx)): 
                new_edge = (in_node_name, out_node_names[i])
                edges_name2.remove((node, out_node_names[i]))            
                edges_name2.append(new_edge)
                edges_color_map2[new_edge] = edges_color_map2[(node, out_node_names[i])]
                
            edges_name2.remove((in_node_name, node))

G3 = nx.DiGraph()
G3.add_edges_from(edges_name2)
dot3 = make_dot(G3, [edges_color_map2[i] for i in list(G3.edges)])


#%% Step 3：delete nodes with no change inward edge and without outward edges
edges_name3 = copy.deepcopy(list(G3.edges))  # edge's name
for node in list(G3.nodes):
    out_edge_idx = find_out_edge(edges_name3, node)
    in_edge_idx = find_in_edge(edges_name3, node)
    
    if len(out_edge_idx) == 0 and len(in_edge_idx) == 1:
        if edges_color_map2[edges_name3[in_edge_idx[0]]] == same_color:
            in_node_name = edges_name3[in_edge_idx[0]][0]
            edges_name3.remove((in_node_name, node))
            
G4 = nx.DiGraph()
G4.add_edges_from(edges_name3)
dot4 = make_dot(G4, [edges_color_map2[i] for i in list(G4.edges)])


#%% Step 4：add notes to the nodes with inward edge that represents mutation 
new_nodes1 = [str(i) for i in range(200)]  # generate names for the new nodes
new_nodes2 = [str(i) for i in np.arange(200,400,1)]  # to the edges represents cross over and mutaion, their names are different from the above
edges_color_map3 = copy.deepcopy(edges_color_map2)
edges_name4 = copy.deepcopy(list(G4.edges))  # edge names
mut_new_idx = 0 
mut_cro_new_idx = 0
for node in list(G4.nodes):
    
    in_edge_idx = find_in_edge(edges_name4, node)
    in_edge_color = [edges_color_map3[edges_name4[i]] for i in in_edge_idx]
    
    if muta_color in in_edge_color:  # mutation only
        if len(in_edge_color)>1:
            in_node_name = edges_name4[in_edge_color.index(muta_color)][0]
        else:
            in_node_name = edges_name4[in_edge_idx[0]][0]
        edges_name4.append((new_nodes1[mut_new_idx], node))  
        edges_color_map3[(new_nodes1[mut_new_idx], node)] = 'aquamarine'  # the edge corlor of the newly added nodes
        # edges_color_map3[(in_node_name, node)] = 'aquamarine3'
        mut_new_idx+=1
    
    if mut_cro_color in in_edge_color:  # cross-over and then mutate
        if len(in_edge_color)>1:
            in_node_name = edges_name4[in_edge_color.index(mut_cro_color)][0]
        else:
            in_node_name = edges_name4[in_edge_idx[0]][0]
        edges_name4.append((new_nodes2[mut_cro_new_idx], node))  
        edges_color_map3[(new_nodes2[mut_cro_new_idx], node)] = 'darkslategray1' 
        # edges_color_map3[(in_node_name, node)] = 'turquoise4'  
        mut_cro_new_idx+=1
    
    
G5 = nx.DiGraph()
G5.add_edges_from(edges_name4)
dot5 = make_dot(G5, [edges_color_map3[i] for i in list(G5.edges)])


#%% Step 5：Create multiGraph(networkX), delete the nodes with single inward edge (represents the same)
edges_color_map4 = copy.deepcopy(edges_color_map3)  # dict - edge names:color
edges_name5 = copy.deepcopy(list(G5.edges))  # edge name
for node in list(G5.nodes):
    out_edge_idx = find_out_edge(edges_name5, node) 
    in_edge_idx = find_in_edge(edges_name5, node)
    
    if len(in_edge_idx) == 1:
        if edges_color_map4[edges_name5[in_edge_idx[0]]] == same_color:  # if inward edge represents the same
            in_node_name = edges_name5[in_edge_idx[0]][0]
            out_node_names = [edges_name5[out_idx][1] for out_idx in out_edge_idx]
            
            for i in range(len(out_edge_idx)):
                new_edge = (in_node_name, out_node_names[i])
                edges_name5.remove((node, out_node_names[i]))            
                edges_name5.append(new_edge)
                edges_color_map4[new_edge] = edges_color_map4[(node, out_node_names[i])]  
                
            edges_name5.remove((in_node_name, node))

# 
# result 1：using multiGraph to keep all edges between two nodes, even though they are the same
G6 = nx.MultiDiGraph()  # multigraph
G6.add_edges_from(edges_name5)
edges_multi = []
colors_multi = []
for i in list(G6.edges):
    edges_multi.append((i[0],i[1]))
    colors_multi.append(edges_color_map4[(i[0],i[1])])
    
dot6 = graphviz.Digraph('test') 
for ii, color in zip(edges_multi, colors_multi):
    dot6.edge(ii[0], ii[1], color=color)  # e.g. ('172_19', '173_1')

# result 2：aloow multiple same meaning edges between two nodes
G7 = nx.DiGraph()
G7.add_edges_from(edges_name5)
dot7 = make_dot(G7, [edges_color_map4[i] for i in list(G7.edges)])
